{"version":3,"sources":["components/Cell.js","components/TicTac.js","components/Helper.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","className","onClick","onButtonClick","value","TicTac","renderSquare","i","cells","state","arr","Array","fill","this","Component","calculateWinner","lines","length","a","b","c","Game","xIsNext","setState","winner","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQAEe,SAASA,EAAKC,GACzB,OACI,4BAAQC,UAAW,OAAQC,QAASF,EAAMG,eACrCH,EAAMI,O,ICgCJC,E,kDAjCX,WAAYL,GAAQ,IAAD,8BACf,cAAMA,IAKVM,aAAe,SAAAC,GACb,OAAO,kBAACR,EAAD,CAAMI,cAAe,kBAAM,EAAKH,MAAMG,cAAcI,IAAIH,MAAO,EAAKJ,MAAMQ,MAAMD,MALrF,EAAKE,MAAM,CACPC,IAAKC,MAAM,GAAGC,KAAK,OAHR,E,qDAWf,OACE,yBAAKX,UAAW,WACd,6BACKY,KAAKP,aAAa,GAClBO,KAAKP,aAAa,GAClBO,KAAKP,aAAa,IAEvB,6BACKO,KAAKP,aAAa,GAClBO,KAAKP,aAAa,GAClBO,KAAKP,aAAa,IAEvB,6BACKO,KAAKP,aAAa,GAClBO,KAAKP,aAAa,GAClBO,KAAKP,aAAa,S,GA3BdQ,a,OCHd,SAASC,EAAgBP,GAW5B,IAVA,IAAMQ,EAAQ,CACV,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAEDT,EAAI,EAAGA,EAAGS,EAAMC,OAAS,EAAGV,IAAK,CAAC,IAAD,cACnBS,EAAMT,GADa,GAC9BW,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIZ,EAAMU,IAAMV,EAAMU,KAAOV,EAAMW,IAAMX,EAAMW,KAAOX,EAAMY,GACxD,OAAOZ,EAAMU,GAGrB,OAAO,K,ICiBIG,E,kDA7BX,WAAYrB,GAAQ,IAAD,8BACf,cAAMA,IAMVG,cAAgB,SAACI,GACP,IAACe,EAAW,EAAKb,MAAhBa,QACHd,EAAQ,EAAKC,MAAMD,MACVO,EAAgBP,IAChBA,EAAMD,KAGnBC,EAAMD,GAAKe,EAAU,IAAM,IAC3B,EAAKC,SAAS,CAACf,QAAOc,SAAUA,MAbhC,EAAKb,MAAM,CACPa,SAAS,EACTd,MAAOG,MAAM,GAAGC,KAAK,OAJV,E,qDAkBT,IAACJ,EAAQK,KAAKJ,MAAbD,MACHgB,EAAQT,EAAgBP,GAC5B,OACI,6BACI,kBAAC,EAAD,CAAQL,cAAeU,KAAKV,cAAeK,MAAOA,IACjDgB,EAAS,yCAAeA,GAAe,Q,GAxBrCV,aCQJW,MARf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,QCKcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.928e6e55.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Cell(props) {\n    return (\n        <button className={'cell'} onClick={props.onButtonClick}>\n            {props.value}\n        </button>\n    )\n}","import React, {Component} from 'react';\nimport Cell from \"./Cell\";\n\nclass TicTac extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            arr: Array(9).fill(null),\n        }\n    }\n    renderSquare = i => {\n      return <Cell onButtonClick={() => this.props.onButtonClick(i)} value={this.props.cells[i]}/>\n    };\n\n    render() {\n        return (\n          <div className={'box-big'}>\n            <div>\n                {this.renderSquare(0)}\n                {this.renderSquare(1)}\n                {this.renderSquare(2)}\n            </div>\n            <div>\n                {this.renderSquare(3)}\n                {this.renderSquare(4)}\n                {this.renderSquare(5)}\n            </div>\n            <div>\n                {this.renderSquare(6)}\n                {this.renderSquare(7)}\n                {this.renderSquare(8)}\n            </div>\n          </div>\n        );\n    }\n}\n\nexport default TicTac;","export function calculateWinner(cells) {\n    const lines = [\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [1,4,8],\n        [2,4,6],\n    ];\n    for(let i = 0; i< lines.length - 1; i++) {\n        const [a, b, c] = lines[i];\n        if (cells[a] && cells[a] === cells[b] && cells[b] === cells[c]) {\n            return cells[a]\n        }\n    }\n    return null;\n}","import React, {Component} from 'react';\nimport TicTac from \"./TicTac\";\nimport {calculateWinner} from \"./Helper\";\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            xIsNext: true,\n            cells: Array(9).fill(null),\n        }\n    }\n    onButtonClick = (i) => {\n        const {xIsNext} = this.state,\n            cells = this.state.cells;\n        let winner = calculateWinner(cells);\n        if(winner || cells[i]) {\n            return;\n        }\n        cells[i] = xIsNext ? 'X' : 'O';\n        this.setState({cells, xIsNext: !xIsNext});\n    };\n    render() {\n        const {cells}= this.state,\n            winner= calculateWinner(cells);\n        return (\n            <div>\n                <TicTac onButtonClick={this.onButtonClick} cells={cells}/>\n                {winner ? <h2>Winner is {winner}</h2> : ''}\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}